auth.py

*test_register
    client.get() makes a GET request and returns the Reponse
    object returned by Flask.

    client.post() makesa POST request, converting the dict
    into form data.


    headers will have a Location header with the login URL
    when the register view redirects to the login view.

    data contains the body of the response as bytes. if you 
    expect a certain value to render on the page, check that
    it's in data.
    ->  bytes must be compared to bytes.
        to compare text use get_data(as_text=True)
    
    pytest.mark.parametrize tells Pytest to run the same
    test function with different arguments
    ->  used here to test different invalid inpout and error
        messags without writing the same code three times.

    tests for login view are similar to register.
    session should have user_id after logging in

*test_login
    using client in a with block allows accessing context 
    variables such as session after the response is returned.

    normally, accessing session outside request would raise
    and error

*test_logout
    
    the opposite of login.
    session should not contain user_id


blog:
    *   All the blog views use the auth fixture above
    *   call auth.login() and subesequent requests will be
    *   logged is as the test user.

setup.cfg
    ->  some extra configuraton, not required, but makes 
        running tests less verbose



use pytest to run tests.
use 'coverage run -m pytest' to run coverage
'coverage report' gives simple report in terminal
'coverage html' gives indepth in browser
